/**
 * 
 */
package com.spring.template;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.jdbc.core.JdbcTemplate;

import com.spring.dao.StudentMarksDeclarativeTransactionDAO;
import com.spring.mapper.StudentMarksMapper;
import com.spring.pojo.StudentMarks;

/**
 * @author edinjos
 *
 */
public class StudentMarksDeclarativeTransactionJDBCTemplate implements
		StudentMarksDeclarativeTransactionDAO {

	private DataSource dataSource;
	private JdbcTemplate jdbcTemplateObject;

	@Override
	public void setDatasource(DataSource ds) {
		this.dataSource = ds;
		jdbcTemplateObject = new JdbcTemplate(ds);
	}

	@Override
	public void create(String name, Integer age, Integer marks, String subject,
			Integer yearResult) {

		System.out.println(this.getClass() + " create..... ");

		try {

			// INSERT SQL statements
			String sql1 = "INSERT into Student (NAME, AGE) values (?,?)";
			int count = jdbcTemplateObject.update(sql1, name, age);
			System.out
					.println(this.getClass() + " Inserted Rows..... " + count);

			// Fetch PRIMARY Key generated by DB.
			String sql2 = "Select max(id) from Student";
			Integer pk = jdbcTemplateObject.queryForObject(sql2, Integer.class);

			// Insert into Marks
			String sql3 = "INSERT into Student_Marks (SUBJECT,MARKS,STUDENT_ID,YEAR_RESULT) values (?,?,?,?)";
			count = jdbcTemplateObject.update(sql3, subject, marks, pk,
					yearResult);
			System.out
					.println(this.getClass() + " Inserted Rows..... " + count);

			if (pk == 3) {
				throw new RuntimeException();
			}

		} finally {
			System.out.println(this.getClass() + " finally status ..... ");
		}

	}

	@Override
	public StudentMarks getStudentMark(Integer id) {
		System.out.println(this.getClass() + " getStudentMark..... ");
		return null;
	}

	@Override
	public List<StudentMarks> listStudentMarks() {
		System.out.println(this.getClass() + " listStudentMarks..... ");

		String sql = "Select s.ID, s.NAME, s.AGE, sm.SUBJECT, sm.MARKS, sm.YEAR_RESULT from"
				+ " Student s, Student_Marks sm where s.id=sm.STUDENT_ID";
		List<StudentMarks> studentMarks = jdbcTemplateObject.query(sql,
				new StudentMarksMapper());

		return studentMarks;
	}

	@Override
	public void createTable() {
		String sql = "create table Student"
				+ " ( ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1,INCREMENT BY 1), "
				+ "NAME VARCHAR(20) default NULL, " + "AGE INT default NULL, "
				+ "PRIMARY KEY (ID) )";

		jdbcTemplateObject.execute(sql);
		System.out.println(StudentJDBCTemplate.class + "Table Created..... "
				+ sql);

		sql = "create table Student_Marks"
				+ " ( ID INT NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1,INCREMENT BY 1), "
				+ "SUBJECT VARCHAR(20) default NULL, "
				+ "MARKS INT default NULL, " + "YEAR_RESULT INT default NULL, "
				+ "STUDENT_ID INT references Student(ID), "
				+ "PRIMARY KEY (ID) )";

		jdbcTemplateObject.execute(sql);
		System.out.println(StudentJDBCTemplate.class + "Table Created..... "
				+ sql);

	}

	@Override
	public void deleteTable() {
		String sql = "DROP table Student_Marks";
		jdbcTemplateObject.execute(sql);
		System.out.println(StudentJDBCTemplate.class + "Table Dropped..... "
				+ sql);

		sql = "DROP table Student";
		jdbcTemplateObject.execute(sql);
		System.out.println(StudentJDBCTemplate.class + "Table Dropped..... "
				+ sql);

	}

}
